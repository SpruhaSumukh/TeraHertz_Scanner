function adjusted_image = nearest_neighbourhood(compute_whole_image, number_of_nn)
%NN Summary of this function goes here
[x,y] = size(compute_whole_image);

adjusted_image = zeros(x, y);
compute_whole_image = (compute_whole_image - min(abs(compute_whole_image(:)))) / (max(abs(compute_whole_image(:))) - min(abs(compute_whole_image(:))) );

%   Detailed explanation goes here
adjusted_image(1:number_of_nn, 1:end) = compute_whole_image(1:number_of_nn, 1:end);
adjusted_image(1:end, 1:number_of_nn) = compute_whole_image(1:end, 1:number_of_nn);
adjusted_image(x-1:x, 1:end) = compute_whole_image(x-1:x, 1:end);
adjusted_image(1:end, y-1:y) = compute_whole_image(1:end, y-1:y);

    for l = number_of_nn+1:x-number_of_nn 
        for m = number_of_nn+1:y-number_of_nn
            if(number_of_nn==2)
%                 v = [-2 -1 0 1 2];
%                 C(1:10,1:2) = combntns(v, 2);
%                 C(11:20,1:2) = combntns(-1*v, 2);

                adjusted_image(l,m) = compute_whole_image(l, m)+ ...
                                      compute_whole_image(l, m+1)+ ...
                                      compute_whole_image(l, m+2)+ ...
                                      compute_whole_image(l, m-1)+ ...
                                      compute_whole_image(l, m-2)+ ...
                                      compute_whole_image(l-2, m-2)+ ...
                                      compute_whole_image(l-2, m)+ ...
                                      compute_whole_image(l-2, m+1)+ ...
                                      compute_whole_image(l-2, m+2)+ ...
                                      compute_whole_image(l-2, m-1)+ ...                              
                                      compute_whole_image(l-1, m-1)+ ...
                                      compute_whole_image(l-1, m)+ ...
                                      compute_whole_image(l-1, m-2)+ ...
                                      compute_whole_image(l-1, m+2)+ ...
                                      compute_whole_image(l-1, m+1)+ ...
                                      compute_whole_image(l+1, m+2)+ ...
                                      compute_whole_image(l+1, m-2)+ ...                          
                                      compute_whole_image(l+1, m+1)+ ...
                                      compute_whole_image(l+1, m)+ ...
                                      compute_whole_image(l+1, m-1)+ ...
                                      compute_whole_image(l+2, m)+ ...
                                      compute_whole_image(l+2, m+2)+ ...
                                      compute_whole_image(l+2, m+1)+ ...
                                      compute_whole_image(l+2, m-2)+ ...
                                      compute_whole_image(l+2, m-1);
            end
            if(number_of_nn==3)
                

%                 v = [-3 -2 -1 0 1 2 3];
%                 C(1:21,1:2) = combntns(v, 2);
%                 C(22:43,1:2) = combntns(-1*v, 2);
                
                adjusted_image(l,m) = compute_whole_image(l, m)+ ...
                                      compute_whole_image(l, m+1)+ ...
                                      compute_whole_image(l, m+2)+ ...
                                      compute_whole_image(l, m-1)+ ...
                                      compute_whole_image(l, m-2)+ ...
                                      compute_whole_image(l-2, m-2)+ ...
                                      compute_whole_image(l-2, m)+ ...
                                      compute_whole_image(l-2, m+1)+ ...
                                      compute_whole_image(l-2, m+2)+ ...
                                      compute_whole_image(l-2, m-1)+ ...                              
                                      compute_whole_image(l-1, m-1)+ ...
                                      compute_whole_image(l-1, m)+ ...
                                      compute_whole_image(l-1, m-2)+ ...
                                      compute_whole_image(l-1, m+2)+ ...
                                      compute_whole_image(l-1, m+1)+ ...
                                      compute_whole_image(l+1, m+2)+ ...
                                      compute_whole_image(l+1, m-2)+ ...                          
                                      compute_whole_image(l+1, m+1)+ ...
                                      compute_whole_image(l+1, m)+ ...
                                      compute_whole_image(l+1, m-1)+ ...
                                      compute_whole_image(l+2, m)+ ...
                                      compute_whole_image(l+2, m+2)+ ...
                                      compute_whole_image(l+2, m+1)+ ...
                                      compute_whole_image(l+2, m-2)+ ...
                                      compute_whole_image(l+2, m-1)+...
                                      compute_whole_image(l-3, m-3)+...
                                      compute_whole_image(l-2, m-3)+ ...
                                      compute_whole_image(l-1, m-3)+ ...
                                      compute_whole_image(l, m-3)+ ...
                                      compute_whole_image(l+1, m-3)+ ...
                                      compute_whole_image(l+2, m-3)+ ...
                                      compute_whole_image(l+3, m-3)+ ...
                                      compute_whole_image(l+3, m-2)+ ...
                                      compute_whole_image(l+3, m-1)+ ...
                                      compute_whole_image(l+3, m)+ ...                              
                                      compute_whole_image(l+3, m+1)+ ...
                                      compute_whole_image(l+3, m)+ ...
                                      compute_whole_image(l+3, m+1)+ ...
                                      compute_whole_image(l+3, m+2)+ ...
                                      compute_whole_image(l+3, m+3)+ ...
                                      compute_whole_image(l+2, m+3)+ ...
                                      compute_whole_image(l+1, m+3)+ ...                          
                                      compute_whole_image(l,m+3)+ ...
                                      compute_whole_image(l-1, m+3)+ ...
                                      compute_whole_image(l-2, m+3)+ ...
                                      compute_whole_image(l-3, m+3)+ ...
                                      compute_whole_image(l-3, m+2)+ ...
                                      compute_whole_image(l-3, m+1)+ ...
                                      compute_whole_image(l-3, m)+ ...
                                      compute_whole_image(l-3, m-1)+ ...
                                      compute_whole_image(l-3, m-2);
            end
        end
    end

end

